<!-- <input id="pac-input" class="controls" type="text" placeholder="Location">

<div class="container">
   <div class="card-panel teal">
    <div id="map" style="width: 75%; height: 20%; position: absolute;">
<!-- <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
 -->

<title>Place Autocomplete Address Form</title>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <style>
      /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
      #map {
        height: 100%;
      }
      /* Optional: Makes the sample page fill the window. */
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
    </style>
    <link type="text/css" rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500">
    <style>
      #locationField, #controls {
        position: relative;
        width: 100%;
      }
      #autocomplete {
        position: absolute;
        top: 0px;
        left: 0px;
        width: 99%;
        border: none;
      }

    </style>
  </head>

  <body>
    <script>
    var placeSearch, autocomplete;
      var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        country: 'long_name',
        postal_code: 'short_name'
      };

      function initAutocomplete() {
        // Create the autocomplete object, restricting the search to geographical
        // location types.
        autocomplete = new google.maps.places.Autocomplete(
            /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
            {types: ['establishment']});

        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        autocomplete.addListener('place_changed', fillForm);
      }
        function fillForm(){
          var place = autocomplete.getPlace();
          document.getElementById("title_field").value = place.name + "," +place.formatted_address;

        }
      // function fillInAddress() {
      //   // Get the place details from the autocomplete object.
      //   var place = autocomplete.getPlace();
      //   console.log("******************")
      //   console.log(place)
      //   console.log(place.formatted_address)
      //   console.log("******************")


      //   for (var component in componentForm) {
      //     document.getElementById(component).value = '';
      //     document.getElementById(component).disabled = false;
      //   }

      //   // Get each component of the address from the place details
      //   // and fill the corresponding field on the form.
      //   for (var i = 0; i < place.address_components.length; i++) {
      //     var addressType = place.address_components[i].types[0];
      //     if (componentForm[addressType]) {
      //       var val = place.address_components[i][componentForm[addressType]];
      //       document.getElementById(addressType).value = val;
      //       console.log("******************")
      //       console.log(val)
      //       console.log("******************")

      //     }
      //   }
      // }

      // Bias the autocomplete object to the user's geographical location,
      // as supplied by the browser's 'navigator.geolocation' object.
      function geolocate() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            var geolocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
            var circle = new google.maps.Circle({
              center: geolocation,
              radius: position.coords.accuracy
            });
            autocomplete.setBounds(circle.getBounds());
          });
        }
      }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV["GOOGLE_API_KEY"] %>&libraries=places&callback=initAutocomplete"
        async defer></script>


<div class="container">

  <% questions_array = ["location", "date", "time"] %>
  <% counter = 0 %>
    <div class="card-panel teal">
  <%= form_for @poll do |f|%>
  <% @poll_array.each do |poll| %>
 <h5> <%= questions_array[counter]%> </h5>

    <% if counter == 0 %>
    <div id="locationField">
      <textarea id="autocomplete" placeholder="Enter your address"
             onFocus="geolocate()" type="text"></textarea>
    </div>
    <br>
    <br>
    <br>
      <%= fields_for 'poll_array[]', poll do |p| %>
     <!-- p.hidden_field :question, value: 'location' %><br> -->

            <%= p.fields_for :choices do |choices_form| %>
              <%= choices_form.label :option %>
              <%= choices_form.text_field :title, id: "title_field"%><br>
            <% end %>
      <% end %>
<br><br><br>

    <% else %>

      <%= fields_for 'poll_array[]', poll do |p| %>
     <!-- p.hidden_field :question, value: 'location' %><br> -->

            <%= p.fields_for :choices do |choices_form| %>
              <%= choices_form.label :option %>
              <%= choices_form.text_field :title %><br>
            <% end %>
      <% end %>
    <% end %>
    <%  counter += 1 %>
  <% end %>
    <%= f.submit "Submit Poll!",:class => "waves-effect purple lighten-1 btn" %>
</div>
  <% end %>
</div>
